import json
import random
import sqlite3
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from flask import Flask, request
import os
from dotenv import load_dotenv

# **1Ô∏è‚É£ Flask aplikƒÅcija**
flask_app = Flask(__name__)

# **2Ô∏è‚É£ IelƒÅdƒì Telegram tokenu**
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")

# **3Ô∏è‚É£ Telegram bot inicializƒÅcija**
bot_app = Application.builder().token(TOKEN).build()

# **4Ô∏è‚É£ Webhook iestatƒ´≈°ana**
async def set_webhook():
    """Inicializƒì botu un iestata webhook"""
    await bot_app.initialize()
    await bot_app.bot.set_webhook(f"https://kvnbot.onrender.com/telegram")

# **5Ô∏è‚É£ Flask webhook route**
@flask_app.route('/telegram', methods=['POST'])
def telegram_webhook():
    """Flask endpoint priek≈° Telegram webhook"""
    update = Update.de_json(request.get_json(force=True), bot_app.bot)

    # ‚úÖ Flask neatbalsta `await`, tƒÅpƒìc jƒÅizmanto `ensure_sync()`
    return flask_app.ensure_sync(bot_app.process_update)(update), 200

# **6Ô∏è‚É£ Flask test route**
@flask_app.route('/')
def index():
    return "KVN –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# **7Ô∏è‚É£ DatubƒÅzes iestatƒ´≈°ana**
conn = sqlite3.connect("kvn_quiz.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS scores (user_id INTEGER, score INTEGER)")
conn.commit()

# **8Ô∏è‚É£ IelƒÅdƒì jautƒÅjumus no JSON**
json_file_path = "kvn_quiz_questions_full.json"
with open(json_file_path, "r", encoding="utf-8") as file:
    QUESTIONS = json.load(file)

print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(QUESTIONS)}")
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# **9Ô∏è‚É£ Funkcija spƒìles sƒÅk≈°anai**
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    context.user_data["score"] = 0
    context.user_data["question_index"] = 0
    context.user_data["questions"] = random.sample(QUESTIONS, 20)  # ‚úÖ 20 nejau≈°i izvƒìlƒìti jautƒÅjumi
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º KVN-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –£ —Ç–µ–±—è –±—É–¥–µ—Ç 20 –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–µ—Ö–∞–ª–∏! üéâ")

    await send_question(update, context)

# **üîü Pievieno Telegram handlerus**
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CallbackQueryHandler(start))

# **1Ô∏è‚É£1Ô∏è‚É£ Funkcija jautƒÅjuma nos≈´tƒ´≈°anai**
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = context.user_data["question_index"]

    if index >= 20:
        await end_quiz(update, context)
        return

    question = context.user_data["questions"][index]
    options = question["options"]
    correct_answer = question["answer"]

    keyboard = [[InlineKeyboardButton(option, callback_data=option)] for option in options]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = await update.message.reply_text(f"‚ùì {question['question']}", reply_markup=reply_markup)

    context.user_data["correct_answer"] = correct_answer
    context.user_data["question_index"] += 1
    context.user_data["answered"] = False
    context.user_data["timer_task"] = asyncio.create_task(countdown(message, question, context))

async def countdown(message, question, context):
    """Atjauno jautƒÅjuma zi≈Üu ik pƒìc 5 sekundƒìm"""
    for i in range(15, 0, -5):
        await asyncio.sleep(5)
        if context.user_data["answered"]:
            return
        await message.edit_text(f"‚è≥ {i}s | {question['question']}")

    if not context.user_data["answered"]:
        context.user_data["answered"] = True
        await message.edit_text(f"‚è≥ 0s | –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {context.user_data['correct_answer']}")

# **1Ô∏è‚É£2Ô∏è‚É£ Atbildes apstrƒÅde**
async def answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_answer = query.data
    correct_answer = context.user_data["correct_answer"]

    context.user_data["answered"] = True
    if "timer_task" in context.user_data:
        context.user_data["timer_task"].cancel()

    if user_answer == correct_answer:
        context.user_data["score"] += 1
        await query.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        await query.message.edit_text(f"üéâ ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")
    else:
        await query.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        await query.message.edit_text(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    await asyncio.sleep(2)
    await send_question(update, context)

# **1Ô∏è‚É£3Ô∏è‚É£ Funkcija spƒìles beig≈°anai**
async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        chat_id = update.message.chat_id
    elif update.callback_query:
        chat_id = update.callback_query.message.chat_id
    else:
        return

    score = context.user_data["score"]

    cursor.execute("INSERT INTO scores (user_id, score) VALUES (?, ?)", (chat_id, score))
    conn.commit()

    leaderboard = get_leaderboard()
    await update.callback_query.message.reply_text(
        f"üèÅ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/20\n\nüèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n{leaderboard}"
    )

# **1Ô∏è‚É£4Ô∏è‚É£ Lƒ´deru tabulas ieg≈´≈°ana**
def get_leaderboard():
    cursor.execute("SELECT user_id, score FROM scores ORDER BY score DESC LIMIT 5")
    results = cursor.fetchall()
    return "\n".join([f"{i+1}. {res[0]} - {res[1]} –æ—á–∫–æ–≤" for i, res in enumerate(results)])

# **1Ô∏è‚É£5Ô∏è‚É£ Pievieno Telegram komandu handlerus**
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CallbackQueryHandler(answer))

print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(QUESTIONS)}")
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

# **1Ô∏è‚É£6Ô∏è‚É£ Palaist serveri**
def start_app():
    """Izsauc `set_webhook()` pirms Flask palai≈°anas"""
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(set_webhook())

    port = int(os.environ.get("PORT", 10000))
    flask_app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    start_app()
